VERSION 0.8

- added the getIdField function in order to make overriding the id column naming possible
- added the getLoadAllCursor in order to make linking to a data DataBoundAdapter possible
- to be better able to work with persistence interfaces the LazyMorphicCollection has been
  introduced in order to be able to return a List<Type> from a Dao<SpecialType>
- interface registration now possible in order to extend code reuseability
  additional to applicationContainer.registerBeanClass(aClass) you now can
  call registerBeanClass(InterfaceType, BeanClass);
- bugfix for NullPointerException in Android preview in IntelliJ
- added support for automatic selection of modified entities (BaseDao.getAllItemsModifiedAfter)
  .. simply extend your rowmapper to implement TimestampSupportingRowmapper and return
     the timestamp fields
- added an after-context-init hook to enable application post-construct
- added a function deleteById carrying a Long parameter to the DAOs
- added an constructor based "transient" determination to ModelBase
- added some utils for basic date calculation
- added queryByExample function in order to do QBE :)


--- DEPRECATION NOTICE ---
- don't inherit AbstractModelBase any more! The "id" column clashes
  with the android convention of carrying and "_id" column, so I added
  a boolean parameter to force You making a review on Your model classes.
  You can either inherit LegacyModelBase (same behaviour like before) or
  - and this is recommended - rebuild Your tables by renaming the "id" column
  to an "_id" column. This restrict impacts when You try to fill view withs
  data using a cursor. So either You must consider using the LegacyBean
  or You should modify Your code.



VERSION 0.7

- Bugfixes wrong logging (wrong logger level instead of output logging level)
- Missing removal of data change listeners added
- now also look in active activities when asking for a bean class
- now also allow managed activities to validate themselves
- Bugfix : Resuming an activity requires dependency injection on the activity


VERSION 0.6
- IMPORTANT: made an APKLIB out of this project. Use type "apklib" now in Your maven dependency!

- added an unified error handling technique for view components (android style and ErrorView style)
- added an automatic view validation technique (ManagedFragment.enableFocusChangeBasedValidation())
- added a generic validation technique for declarative validation of view components
- moved from getManagedClass to constructor based solution carrying a final variable

- Single Parameter String resolve function
- some minor bugfixes and improvements on the application context
- StringUtil for easier TextView handling
- removed re-ordering of fields, now you MUST statically index Your fields in the Your beans.
  !! The prior function was buggy !!

VERSION 0.5

- prototype beans now supported. prototype beans are bean instances with DI that are no singleton for
  in-application use
- context now injecteable
- Exceptions in context and bean handling reused
