VERSION 0.9.2

- Improved Logging with new logging configuration etc
- Bugfix ManagedActivity + ManagedFragment

VERSION 0.9.1

- Added a simplified yes-no-macro to have a code-saving, comprehensive capabilities to create yes-no-dialogboxes in Popup class
- Added a unregister call for clean deleteListener deregistration
- Made ManagedActivity auto injecting to avoid NPE on access on injected beans after device rotate

VERSION 0.9

- Package moved from net.mantucon.baracus to org.baracus. Simply replacing all net.mantucon.baracus by org.baracus in your projects should do the job.
- added a few unit tests for quality assurance
    - DataUtil (List2Map Transformator) now fully tested

VERSION 0.8.3

- bugfixed bad transaction handling in BaseDao.saveAll
- added method enableFocusChangeBasedValidation(); with view Parameter
- added constrained spinner. due to a plugin problem this version's ui element has got a different validation-tag
- added the capability to have postConstruct methods in prototype beans


VERSION 0.8.2

- added the installation of the baracus-framework-${version}.jar into the deployment. You can use this in multi-module project to have the framework dependencies in sublibs without clashing "R".
- improved javadocs

VERSION 0.8.1

- added DataUtil for simple Collection -> Map transformations
- added list based delete/save functions

- added NullReference in ORM to avoid NPE handling on nullified References
- added Popup macro
- bugfixed query-function (double iteration)
- added generic arrify function to BaseDao to make collections become an array on demand


- added function to create lazy object reference by dao and id to application context
 (was useful to me for dto-to-model copy constructor)
- added function to create lazy collection references by dao, id and remote field
 (same like above)
- created optmistic locking capable entity (via version field)
- created BaseDao.initialFromCursor factory function to make coping with ID and version
  a little bit more flexible.
- bugfixed ModelBase field list naming
- bugfixed replaceBean method
- added support for optimistic locking, useful when multiple android clients are writing
  to one android master database.
- added a locator function BaracusApplicationContext.getBeansOfType to find all instances
  implementing a certain class.
- bugfixed loss of timestamp info in BaseDao.save()



VERSION 0.8

- added the getIdField function in order to make overriding the id column naming possible
- added the getLoadAllCursor in order to make linking to a data DataBoundAdapter possible
- to be better able to work with persistence interfaces the LazyMorphicCollection has been
  introduced in order to be able to return a List<Type> from a Dao<SpecialType>
- interface registration now possible in order to extend code reuseability
  additional to applicationContainer.registerBeanClass(aClass) you now can
  call registerBeanClass(InterfaceType, BeanClass);
- also : replace bean implementations in the running application and context hot reinit
- bugfix for NullPointerException in Android preview in IntelliJ
- added support for automatic selection of modified entities (BaseDao.getAllItemsModifiedAfter)
  .. simply extend your rowmapper to implement TimestampSupportingRowmapper and return
     the timestamp fields
- added an after-context-init hook to enable application post-construct
- added a function deleteById carrying a Long parameter to the DAOs
- added an constructor based "transient" determination to ModelBase
- added some utils for basic date calculation
- added queryByExample function in order to do QBE :)
- modified DataSetChangeAware interface, now passes the emitted class in order to be able to
  create aggregator-alike DataSetChangeAware components handling multiple entity types
- introduced a query() function in BaseDao to unify querying for full lists
- harmonized internal getBy...Functions


--- DEPRECATION NOTICE ---
- don't inherit AbstractModelBase any more! The "id" column clashes
  with the android convention of carrying and "_id" column, so I added
  a boolean parameter to force You making a review on Your model classes.
  You can either inherit LegacyModelBase (same behaviour like before) or
  - and this is recommended - rebuild Your tables by renaming the "id" column
  to an "_id" column. This restrict impacts when You try to fill view withs
  data using a cursor. So either You must consider using the LegacyBean
  or You should modify Your code.



VERSION 0.7

- Bugfixes wrong logging (wrong logger level instead of output logging level)
- Missing removal of data change listeners added
- now also look in active activities when asking for a bean class
- now also allow managed activities to validate themselves
- Bugfix : Resuming an activity requires dependency injection on the activity


VERSION 0.6
- IMPORTANT: made an APKLIB out of this project. Use type "apklib" now in Your maven dependency!

- added an unified error handling technique for view components (android style and ErrorView style)
- added an automatic view validation technique (ManagedFragment.enableFocusChangeBasedValidation())
- added a generic validation technique for declarative validation of view components
- moved from getManagedClass to constructor based solution carrying a final variable

- Single Parameter String resolve function
- some minor bugfixes and improvements on the application context
- StringUtil for easier TextView handling
- removed re-ordering of fields, now you MUST statically index Your fields in the Your beans.
  !! The prior function was buggy !!

VERSION 0.5

- prototype beans now supported. prototype beans are bean instances with DI that are no singleton for
  in-application use
- context now injecteable
- Exceptions in context and bean handling reused
